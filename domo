#!/usr/bin/env python
import sys
from time import sleep
sys.path.append("/usr/lib/python3.12/site-packages")
import argparse
import whois
from datetime import datetime
import notify2

parser = argparse.ArgumentParser(description='Whois based domain monitoring tool')
parser.add_argument('--config-file', '-C', type=str, help='file containing list of domains')
parser.add_argument('--domains', '-d', type=str, help='standalone comma sep list of domains to check')
args = parser.parse_args()

notify2.init("domo cli tool")

if len(sys.argv) == 1:
    parser.print_help(sys.stderr)

if args.config_file and not args.domains:
    domains = []
    for domain in open(args.config_file, 'rt'):
        domains.append(domain.strip())

    report = {}

    for domain in domains:
        sleep(5) # to prevent 'too many requests' error from whois service
        w = whois.whois(domain)
        try:
            expiry_date=w['expiration_date'][0].isoformat().split("T")[0]
            report.update({domain: expiry_date})
        except:
            expiry_date=w['expiration_date'].isoformat().split("T")[0]
            report.update({domain: expiry_date})

    sorted_report = sorted(report.items(), key=lambda item: item[1], reverse=False)
    sorted_report = dict(sorted_report)
    for k, v in sorted_report.items():
        print(f"{k} expiry_date: {v}")

    def near_expiry(sorted_report):
        print()
        print("expiring soon")
        near_expiry = []
        for k, v in sorted_report.items():
            diff = datetime.fromisoformat(v) - datetime.now()
            if diff.days < 32:
                print(f"{k}: {v}")
                n = notify2.Notification(f"{k}: {v}")
                n.show()
                sleep(2)

    near_expiry(sorted_report)

elif args.domains and not args.config_file:
    print("todo standalone domains check")
    print(args.domains)
elif args.domains and args.config_file:
    print("cannot use both domains and config_file at the same time!", file=sys.stderr)
